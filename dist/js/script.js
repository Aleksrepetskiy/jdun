"use strict";window.addEventListener("DOMContentLoaded",function(){function t(){$(".popup").removeClass("active"),$("body").off("click")}document.addEventListener("keydown",function(e){"Escape"===e.code&&t()}),$(".js-open").on("click",function(e){e.preventDefault();e=$(this).data("attr");t(),$(e).addClass("active")}),$(".js-close").on("click",function(e){e.preventDefault(),t()}),$(window).resize(function(){1340<$(window).width()&&($(".menu__item").removeClass("opened"),$(".menu__box").removeClass("active"),$("html").removeClass("html-over"))}),$(".hamburger").on("click",function(e){e.preventDefault(),$(this).closest(".menu").find(".menu__box").addClass("active"),$("html").addClass("html-over")}),$(".menu__close").on("click",function(e){e.preventDefault(),$(this).closest(".menu__box").removeClass("active"),$("html").removeClass("html-over")}),$(".popup").on("click",function(e){$("body").on("click",function(){e.target.classList.contains("popup")&&t()})}),$(".faq__header").on("click",function(e){e.preventDefault();var e=$(this),t=e.closest(".faq__item");list=e.closest(".faq__list"),items=list.find(".faq__item"),content=t.find(".faq__dropdown"),otherContent=list.find(".faq__dropdown"),duration=300,t.hasClass("active")?t.stop(!0,!0).removeClass("active"):(items.removeClass("active"),t.addClass("active"))});var e=$(".up");$(window).scroll(function(){200<$(this).scrollTop()?e.fadeIn():e.fadeOut()}),e.on("click",function(){$("html, body").animate({scrollTop:0},1500)});try{var i=document.querySelectorAll(".index-news__tab-content"),n=document.querySelector(".index-news__tabs"),s=n.querySelectorAll(".index-news__tab");n.addEventListener("click",function(e){var n=e.target;n.classList.contains("index-news__tab")&&s.forEach(function(e,t){e==n&&(i.forEach(function(e){e.classList.add("hide"),e.classList.remove("show","fade")}),s.forEach(function(e){e.classList.remove("active")}),function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0;i[e].classList.add("show","fade"),i[e].classList.remove("hide"),s[e].classList.add("active")}(t))})})}catch(e){}try{new Swiper(".main-swiper",{loop:!0,keyboard:{enabled:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}}),new Swiper(".materials-swiper",{slidesPerView:3,spaceBetween:20,loop:!0,keyboard:{enabled:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},pagination:{el:".swiper-pagination",clickable:!0},breakpoints:{320:{slidesPerView:1},499:{slidesPerView:2},991:{slidesPerView:3}}})}catch(e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,